/* Database schema analogical to the structure of the classes in our app. */
CREATE DATABASE catalog_of_things;

-- Create book table
CREATE TABLE Book (
 id SERIAL,
 publish_date DATE NOT NULL DEFAULT CURRENT_DATE,
 publisher VARCHAR(30),
 cover_state CHAR(30),
 archived BOOLEAN,
 genre_id INT,
 label_id INT,
 author_id INT,
 CONSTRAINT fk_genre FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
 CONSTRAINT fk_label FOREIGN KEY (label_id) REFERENCES labels(label_id)
 CONSTRAINT fk_author FOREIGN KEY (author_id) REFERENCES authors(author_id)
 PRIMARY KEY(id)
);

-- Create label table
CREATE TABLE labels (
label_id SERIAL,
title VARCHAR(30),
color VARCHAR(30)
PRIMARY KEY(label_id)
);

-- Create music album table 
CREATE TABLE MusicAlbum(
  id            INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  genre_id      INTEGER,
  author_id     INTEGER,
  label_id      INTEGER,
  publish_date  DATE,
  archived      BOOLEAN,
  name     VARCHAR(250),
  on_spotify    BOOLEAN,

  FOREIGN KEY (genre_id) REFERENCES Genre(id)
  FOREIGN KEY (author_id) REFERENCES Author(id)
  FOREIGN KEY (label_id) REFERENCES Label(id)
);

-- Create genre table 
CREATE TABLE Genre(
  id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name    VARCHAR(100)
);

-- Create author table
- Create author table
CREATE TABLE Author(
    id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    first_name VARCHAR(100),
    last_name VARCHAR(100)
);

-- Create game table
CREATE TABLE Game(
    id             INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_id       integer,
    author_id      integer,
    publish_date   date,
    archived       boolean,
    multiplayer    VARCHAR(3),
    last_played_at date,
    FOREIGN KEY(genre_id) REFERENCES Genre(id)
    FOREIGN KEY(author_id) REFERENCES Author(id)
    FOREIGN KEY(label_id) REFERENCES Label(id)
);
